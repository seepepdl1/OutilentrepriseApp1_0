ui <- fluidPage(
column(width = 8,
tabBox(width = 12,
tabPanel(
'Items',
fluidRow(
style = 'margin:2px',
wellPanel(
tags$form(class = 'form-horizontal',
tags$b('Filter items'),
tags$div(
class = 'form-group',
tags$label(class = "col-sm-3 control-label", `for` = 'type', "By type:"),
column(
width = 9,
pickerInput(
inputId = 'type', label = '',
choices = character(0),
multiple = T
))),
tags$div(
class = 'form-group',
tags$label(class = "col-sm-3 control-label", `for` = 'name', "By name:"),
column(
width = 9,
searchInput(
inputId = 'name', label = '',
placeholder = "Search by name",
btnSearch = icon("search"),
btnReset = icon("remove")
))
)
)
)
)
)
)
) #/column 8
)
library(shinyWidgets)
library(shiny)
library(shiny)
if (interactive()) {
ui <- fluidPage(
tags$h1("Search Input"),
br(),
searchInput(
inputId = "search", label = "Enter your text",
placeholder = "A placeholder",
btnSearch = icon("search"),
btnReset = icon("remove"),
width = "450px"
),
br(),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint({
input$search
})
}
shinyApp(ui = ui, server = server)
}
rm(list = ls())
library(shinysky)
library(shiny)
my_autocomplete_list <- c("John Doe","Ash","Ajay sharma","Ken Chong","Will Smith","Neo")
ui <- shinyUI(
fluidPage(sidebarPanel(select2Input("txt","",choices=c("a","b","c"),selected=c("")), br(),actionButton("go","submit"), width =2),
mainPanel(textOutput('text'))
)
)
server <- function(input, output, session) {
var <- reactive({
if(input$go==0){return()}
isolate({
input$go
cbind("a","c")
})
})
output$text <- renderText({var()})
}
shinyApp(ui = ui, server = server)
instamm.packages('shinysky')
install.packages('shinysky')
install.packages('shinySky')
library('shiny')
icd$Description <- as.factor(as.character(icd$Description))
x <- as.vector(levels(icd$Description))
groups <- function(x){
for(i in 1:length(x)){
if(i == 1){
savelist <-c()
newlist <- list(list(value = x[i], label=x[i]))
savelist <- c(savelist, newlist)
}else{
newlist <- list(list(value = x[i], label=x[i]))
savelist <- c(savelist, newlist)
}
}
return(savelist)
}
ui <- fluidPage(
selectizeInput('group', NULL, NULL, multiple = TRUE, options = list(
placeholder = 'Select a category',
# predefine all option groups
optgroups = lapply(unique(icd$Description), function(x){
list(value = as.character(x), label = as.character(x))
}),
# what field to sort according to groupes defined in 'optgroups'
optgroupField = 'Description',
# you can search the data based on these fields
searchField = c('Extended', 'Description', 'Labels'),
# the label that will be shown once value is selected
labelField= 'Extended',
# (each item is a row in data), which requires 'value' column (created by cbind at server side)
render = I("{
option: function(item, escape) {
return '<div>' + escape(item.Extended) +'</div>';
}
}")
)))
server <- function(input, output, session) {
updateSelectizeInput(session, 'group', choices = cbind(icd, value =
seq_len(nrow(icd))), server = TRUE)
}
shinyApp(ui, server)
library(shiny)
icd <- tibble(ICD10=c("C00","C01","C01","C02","C03","C03"),
Description=c("Malignant neoplasm of lip","Malignant neoplasm of lip","Malignant neoplasm of base of tongue",
"Malignant neoplasm of other and unspecified parts of tongue","Malignant neoplasm of gum","Malignant neoplasm of gum"),
Extended=c("C00.0","C00.1","C01","C02","C03.0","C03.1"),
Labels = c("External upper lip","External lower lip","Malignant neoplasm of base of tongue",
"Border of tongue","Upper gum","Lower gum"))
icd$Description <- as.factor(as.character(icd$Description))
icd$Extended <- as.factor(as.character(icd$Extended))
cicd <- split(as.list(levels(icd$Extended)), icd$Description)
icd$Description <- as.factor(as.character(icd$Description))
x <- as.vector(levels(icd$Description))
groups <- function(x){
for(i in 1:length(x)){
if(i == 1){
savelist <-c()
newlist <- list(list(value = x[i], label=x[i]))
savelist <- c(savelist, newlist)
}else{
newlist <- list(list(value = x[i], label=x[i]))
savelist <- c(savelist, newlist)
}
}
return(savelist)
}
ui <- fluidPage(
selectizeInput('group', NULL, NULL, multiple = TRUE, options = list(
placeholder = 'Select a category',
# predefine all option groups
optgroups = lapply(unique(icd$Description), function(x){
list(value = as.character(x), label = as.character(x))
}),
# what field to sort according to groupes defined in 'optgroups'
optgroupField = 'Description',
# you can search the data based on these fields
searchField = c('Extended', 'Description', 'Labels'),
# the label that will be shown once value is selected
labelField= 'Extended',
# (each item is a row in data), which requires 'value' column (created by cbind at server side)
option: function(item, escape) {
return '<div>' + escape(item.Extended) +'</div>';
}
}")
)))
server <- function(input, output, session) {
updateSelectizeInput(session, 'group', choices = cbind(icd, value =
seq_len(nrow(icd))), server = TRUE)
}
shinyApp(ui, server)
runApp('trash4.R')
install.packages("devtools")
devtools::install_github("ShinySky","AnalytixWare")
devtools::install_github("AnalytixWare/ShinySky")
library(shinysky)
shinysky::run.shinysky.example()
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash1.R')
ui <-
fluidRow(
selectizeInput(
inputId = "searchme",
label = "Search Bar",
multiple = FALSE,
choices = c("Search Bar" = "", paste0(LETTERS,sample(LETTERS, 26))),
options = list(
create = FALSE,
placeholder = "Search Me",
maxItems = "1",
onDropdownOpen = I("function($dropdown) {if (!this.lastQuery.length) {this.close(); this.settings.openOnFocus = false;}}"),
onType = I("function (str) {if (str === '') {this.close();}}")
)
))
library(shiny)
ui <-
fluidRow(
selectizeInput(
inputId = "searchme",
label = "Search Bar",
multiple = FALSE,
choices = c("Search Bar" = "", paste0(LETTERS,sample(LETTERS, 26))),
options = list(
create = FALSE,
placeholder = "Search Me",
maxItems = "1",
onDropdownOpen = I("function($dropdown) {if (!this.lastQuery.length) {this.close(); this.settings.openOnFocus = false;}}"),
onType = I("function (str) {if (str === '') {this.close();}}")
)
))
server <- function(input, output) {
observe({
print(input$searchme)
})
}
shinyApp(ui, server)
if (interactive()) {
ui <- fluidPage(
tags$h1("Search Input"),
br(),
searchInput(
inputId = "search", label = "Enter your text",
placeholder = "A placeholder",
btnSearch = icon("search"),
btnReset = icon("remove"),
width = "450px"
),
br(),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint({
input$search
})
}
shinyApp(ui = ui, server = server)
}
library(shiny); runApp('trash3.R')
Titanic2 <- as.data.frame(Titanic, stringsAsFactors = FALSE)
View(Titanic2)
Titanic2 <- cbind(Titanic2, value = seq_len(nrow(Titanic2)))
Titanic2$label <- apply(Titanic2[, 2:4], 1, paste, collapse = ', ')
zones <- read_csv('Zones.csv')
library(shiny)
zones <- read_csv('Zones.csv')
library(tidyverse)
zones <- read_csv('Zones.csv')
View(zones)
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash4.R')
runApp('trash1.R')
runApp('app old.R')
runApp('trash4.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash1.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
dashboardBadge("Badge 1", color = "danger"),
actionButton(
inputId = "badge",
label = "Hello",
icon = NULL,
width = NULL,
dashboardBadge(1, color = "primary")
)
)
),
server = function(input, output) { }
)
library(shiny)
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
dashboardBadge("Badge 1", color = "danger"),
actionButton(
inputId = "badge",
label = "Hello",
icon = NULL,
width = NULL,
dashboardBadge(1, color = "primary")
)
)
),
server = function(input, output) { }
)
library(shiny)
library(bs4Dash)
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
actionButton(
inputId = "badge",
label = "Hello",
icon = NULL,
width = NULL,
dashboardBadge(1, color = "danger")
)
)
),
server = function(input, output) { }
)
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
if (interactive()) {
library(shiny)
library(bs4Dash)
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
box(
title = "App Buttons",
status = NULL,
appButton(
inputId = "myAppButton",
label = "Users",
icon = icon("users"),
color = "orange",
dashboardBadge(textOutput("btnVal"), color = "primary")
)
)
),
title = "App buttons"
),
server = function(input, output) {
output$btnVal <- renderText(input$myAppButton)
}
)
}
runApp('trash4.R')
runApp('trash5.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
dashboardBadge("Badge 1", color = "danger"),
actionButton(
inputId = "badge",
label = "Hello",
icon = NULL,
width = NULL,
dashboardBadge(1, color = "primary")
)
)
),
server = function(input, output) { }
)
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
actionButton(
inputId = "badge",
label = "Hello",
icon = shiny::icon('sliders-h'),
width = NULL,
dashboardBadge(1, color = "danger")
)
)
),
server = function(input, output) { }
)
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
actionButton(
inputId = "badge",
label = "Hello",
icon = shiny::icon('sliders-h'),
width = NULL,
dashboardBadge(1, color = "danger")
)
)
),
server = function(input, output) { }
)
runApp('trash6.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash3.R')
runApp('trash4.R')
runApp()
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash6.R')
library(shiny); runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash2.R')
header <- bs4DashNavbar(
title = bs4DashBrand("Outil entreprise", color = NULL, href = NULL, image = "logo.png", opacity = 0.8),
leftUi = NULL,
rightUi = NULL,
skin = "light",
status = "white",
border = T,
compact = F,
sidebarIcon = shiny::icon("bars"),
fixed = T,
tags$ul(class = 'navbar-nav',
tags$li(class = 'nav-item', choixZone),
tags$li(class = 'nav-item', filtres)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp()
runApp('trash1.R')
selectInput()
selectInput('hj')
selectizeInput(inputId = "searchZone",
label = NULL,
multiple = T,
choices = list(`Placeholder` = "",
`Région` = list("Région - Pays de la Loire"),
`Département` = list("Département - Loire-Atlantique", "Département - Maine-et-Loire", "Département - Mayenne", "Département - Sarthe", "Département - Vendée"),
`Agence` = list('Agence - Ancenis', 'Agence - Angers Balzac', 'Agence - Angers Capucins', 'Agence - Angers Europe', 'Agence - Angers La Roseraie', 'Agence - Beaufort en Vallée', 'Agence - Beaupreau')),
options = list(create = FALSE,
maxItems = "1",
placeholder = "Rechercher une zone...",
onDropdownOpen = I("function($dropdown) {if (!this.lastQuery.length) {this.close(); this.settings.openOnFocus = false;}}"),
onType = I("function (str) {if (str === \"\") {this.close();}}"),
onItemAdd = I("function() {this.close();}")))
)
library(shiny); runApp('app_old.R')
runApp()
runApp('trash1.R')
runApp('trash1.R')
runApp()
