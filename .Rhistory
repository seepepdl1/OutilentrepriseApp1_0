dashboardHeader(),
dashboardSidebar(),
dashboardBody(
actionButton(
inputId = "badge",
label = "Hello",
icon = shiny::icon('sliders-h'),
width = NULL,
dashboardBadge(1, color = "danger")
)
)
),
server = function(input, output) { }
)
runApp('trash6.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash3.R')
runApp('trash4.R')
runApp()
runApp('trash4.R')
runApp('trash4.R')
runApp('trash4.R')
runApp('trash6.R')
library(shiny); runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash5.R')
runApp('trash2.R')
header <- bs4DashNavbar(
title = bs4DashBrand("Outil entreprise", color = NULL, href = NULL, image = "logo.png", opacity = 0.8),
leftUi = NULL,
rightUi = NULL,
skin = "light",
status = "white",
border = T,
compact = F,
sidebarIcon = shiny::icon("bars"),
fixed = T,
tags$ul(class = 'navbar-nav',
tags$li(class = 'nav-item', choixZone),
tags$li(class = 'nav-item', filtres)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('trash1.R')
runApp('trash1.R')
runApp('trash1.R')
runApp()
runApp('trash1.R')
selectInput()
selectInput('hj')
selectizeInput(inputId = "searchZone",
label = NULL,
multiple = T,
choices = list(`Placeholder` = "",
`Région` = list("Région - Pays de la Loire"),
`Département` = list("Département - Loire-Atlantique", "Département - Maine-et-Loire", "Département - Mayenne", "Département - Sarthe", "Département - Vendée"),
`Agence` = list('Agence - Ancenis', 'Agence - Angers Balzac', 'Agence - Angers Capucins', 'Agence - Angers Europe', 'Agence - Angers La Roseraie', 'Agence - Beaufort en Vallée', 'Agence - Beaupreau')),
options = list(create = FALSE,
maxItems = "1",
placeholder = "Rechercher une zone...",
onDropdownOpen = I("function($dropdown) {if (!this.lastQuery.length) {this.close(); this.settings.openOnFocus = false;}}"),
onType = I("function (str) {if (str === \"\") {this.close();}}"),
onItemAdd = I("function() {this.close();}")))
)
library(shiny); runApp('app_old.R')
runApp()
runApp('trash1.R')
runApp('trash1.R')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('app_old.R')
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Awesome action button"),
tags$br(),
actionBttn(
inputId = "bttn1",
label = "Go!",
color = "primary",
style = "bordered"
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn1"),
tags$br(),
actionBttn(
inputId = "bttn2",
label = "Go!",
color = "success",
style = "material-flat",
icon = icon("sliders"),
block = TRUE
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn2")
)
server <- function(input, output, session) {
output$res_bttn1 <- renderPrint(input$bttn1)
output$res_bttn2 <- renderPrint(input$bttn2)
}
shinyApp(ui = ui, server = server)
}
runApp()
runApp()
ui <- fluidPage(
tags$h2("Awesome action button"),
tags$br(),
actionBttn(
inputId = "bttn1",
label = "Go!",
color = "primary",
style = "bordered"
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn1"),
tags$br(),
actionBttn(
inputId = "bttn2",
label = "Go!",
color = "success",
style = "material-flat",
icon = icon("sliders"),
block = TRUE
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn2")
)
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Awesome action button"),
tags$br(),
actionBttn(
inputId = "bttn1",
label = "Go!",
color = "primary",
style = "bordered"
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn1"),
tags$br(),
actionBttn(
inputId = "bttn2",
label = "Go!",
color = "success",
style = "material-flat",
icon = icon("sliders"),
block = TRUE
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn2")
)
server <- function(input, output, session) {
output$res_bttn1 <- renderPrint(input$bttn1)
output$res_bttn2 <- renderPrint(input$bttn2)
}
shinyApp(ui = ui, server = server)
}
runApp()
runApp()
install.packages('slickR')
install.packages("slickR")
library(svglite)
library(htmlwidgets)
library(slickR)
slickR(obj = nba_player_logo$uri,height = 100, width = "95%")
nba_player_logo$uri
slickR(obj = nba_player_logo$uri, height = 100, width = "95%") +
settings(dots = TRUE)
library(htmlwidgets)
library(slickR)
slickR(obj = nba_player_logo$uri,height = 100, width = "95%") +
settings(
dots = TRUE,
initialSlide = 0,
slidesToShow = 5,
slidesToScroll = 5,
focusOnSelect = TRUE
)
library(htmlwidgets)
library(slickR)
slickR(obj = nba_player_logo$uri,height = 100, width = "95%") +
settings(
dots = F,
initialSlide = 0,
slidesToShow = 5,
slidesToScroll = 5,
focusOnSelect = TRUE
)
library(htmlwidgets)
library(htmlwidgets)
library(slickR)
slickR(obj = nba_player_logo$uri,height = 100, width = "95%") +
settings(
dots = F,
initialSlide = 0,
slidesToShow = 5,
slidesToScroll = 5,
focusOnSelect = F
)
runApp()
class(nba_player_logo$uri)
runApp()
library(shiny); runApp('trash08.R')
runApp()
if (interactive()) {
library(shiny)
library(bs4Dash)
shinyApp(
ui = dashboardPage(
header = dashboardHeader(skin = "dark"),
body = dashboardBody(
tabItems(
tabItem(
tabName = "tab1",
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
),
tabItem(
tabName = "tab2",
checkboxGroupInput(
"variable", "Variables to show:",
c(
"Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear"
)
),
tableOutput("data")
),
tabItem(
tabName = "tab3",
checkboxInput("val", "Some value", FALSE),
textOutput("value")
),
tabItem(
tabName = "tab4",
"Nothing special here!"
),
tabItem(
tabName = "tab5",
"Tab 5"
),
tabItem(
tabName = "tab6",
"Tab 6"
),
tabItem(
tabName = "tab7",
"Tab 7"
)
)
),
sidebar = dashboardSidebar(
skin = "light",
inputId = "sidebarState",
sidebarMenu(
id = "sidebar",
menuItem(
text = "Tab 1",
tabName = "tab1",
icon = icon("shuttle-van")
),
menuItem(
text = "Tab 2",
tabName = "tab2",
icon = icon("space-shuttle"),
selected = TRUE
),
menuItem(
text = "Item List 1",
icon = icon("bars"),
startExpanded = TRUE,
menuSubItem(
text = "Item 3",
tabName = "tab3",
icon = icon("circle-thin")
),
menuSubItem(
text = "Item 4",
tabName = "tab4",
icon = icon("circle-thin")
)
),
menuItem(
text = "Item List 2",
icon = icon("bars"),
startExpanded = FALSE,
menuSubItem(
text = "Item 5",
tabName = "tab5",
icon = icon("circle-thin")
),
menuSubItem(
text = "Item 6",
tabName = "tab6",
icon = icon("circle-thin")
)
),
menuItem(
text = "Tab 7",
tabName = "tab7",
icon = icon("home")
)
)
),
controlbar = dashboardControlbar(
skin = "light",
sliderInput(
inputId = "controller",
label = "Update the first tabset",
min = 1,
max = 6,
value = 2
)
),
footer = bs4DashFooter()
),
server = function(input, output, session) {
observe(print(input$sidebarItemExpanded))
observe(print(input$sidebar))
# update tabset1
observeEvent(input$controller,
{
updateTabItems(
session,
inputId = "sidebar",
selected = paste0("tab", input$controller)
)
},
ignoreInit = TRUE
)
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
output$data <- renderTable(
{
mtcars[, c("mpg", input$variable), drop = FALSE]
},
rownames = TRUE
)
output$value <- renderText({
input$val
})
}
)
}
shiny::runApp()
runApp('trash/trash03.R')
runApp('trash/trash03.R')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
shinyjs::inlineCSS(list(.big = "font-size: 2em")),
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info", href = "#"),
shinyjs::hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update", href = "#")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
)
),
server = function(input, output) {
observe({
shinyjs::toggleState("submit", !is.null(input$name) && input$name != "")
})
shinyjs::onclick("toggleAdvanced",
shinyjs::toggle(id = "advanced", anim = TRUE))
shinyjs::onclick("update", shinyjs::html("time", date()))
observe({
shinyjs::toggleClass("myapp", "big", input$big)
})
observeEvent(input$submit, {
shinyjs::alert("Thank you!")
})
observeEvent(input$reset, {
shinyjs::reset("myapp")
})
}
)
library(bs4Dash)
shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
shinyjs::inlineCSS(list(.big = "font-size: 2em")),
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info", href = "#"),
shinyjs::hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update", href = "#")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
)
),
server = function(input, output) {
observe({
shinyjs::toggleState("submit", !is.null(input$name) && input$name != "")
})
shinyjs::onclick("toggleAdvanced",
shinyjs::toggle(id = "advanced", anim = TRUE))
shinyjs::onclick("update", shinyjs::html("time", date()))
observe({
shinyjs::toggleClass("myapp", "big", input$big)
})
observeEvent(input$submit, {
shinyjs::alert("Thank you!")
})
observeEvent(input$reset, {
shinyjs::reset("myapp")
})
}
)
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
useShinyjs(),
navbarPage("",
tabPanel("tab",
div( id ="Sidebar",sidebarPanel(
)),
mainPanel(actionButton("showSidebar", "Show sidebar"),
actionButton("hideSidebar", "Hide sidebar")
)
)
)
)
runApp('trash/trash03.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('trash/trash03.R')
runApp()
