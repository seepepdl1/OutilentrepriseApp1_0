#*****************************************************************************************************
# DESCRIPTION   : Application Web
#
# ENVIRONNEMENT : R 4.1.1 - shiny - shinydashboard - tidyverse - DT
#  
# TODO          : 
#*****************************************************************************************************
    
  library(shiny)
  library(shinyBS)
  library(shinyjs)
  library(shinydashboard)
  library(tidyverse)
  library(DT)
  library(plotly)
  
  
  # ----------------------------------------------------------------------------------------------------
  # > FONCTIONS
  # ----------------------------------------------------------------------------------------------------
  
  telModal <- function() {
    div(id = "telDiv",
        modalDialog(downloadButton("download1","Format CSV", icon = icon("file-csv")),
                    easyClose = TRUE, 
                    title = "Télécharger la liste",
                    footer = modalButton(label = "Fermer", icon = icon("window-close")))
    )
  }
  
  telModal2 <- function() {
    div(id = "telDiv2",
        modalDialog(downloadButton("download2","Format CSV", icon = icon("file-csv")),
                    easyClose = TRUE, 
                    title = "Télécharger la liste",
                    footer = modalButton(label = "Fermer", icon = icon("window-close")))
    )
  }
  telModal3 <- function() {
    div(id = "telDiv3",
        modalDialog(downloadButton("download3","Format CSV", icon = icon("file-csv")),
                    easyClose = TRUE, 
                    title = "Télécharger la liste",
                    footer = modalButton(label = "Fermer", icon = icon("window-close")))
    )
  }
  telModal4 <- function() {
    div(id = "telDiv4",
        modalDialog(downloadButton("download4","Format CSV", icon = icon("file-csv")),
                    easyClose = TRUE, 
                    title = "Télécharger la liste",
                    footer = modalButton(label = "Fermer", icon = icon("window-close")))
    )
  }
  
  
  menuSubItem2 <- function (text, tabName = NULL, href = NULL, newtab = TRUE, 
                            icon = shiny::icon("angle-double-right"), 
                            selected = NULL, badgeLabel = NULL, badgeColor = "green") {
    if (!is.null(href) && !is.null(tabName)) {
      stop("Can't specify both href and tabName")
    }
    isTabItem <- FALSE
    target <- NULL
    if (!is.null(badgeLabel)) {
      badgeTag <- tags$small(class = paste0("badge pull-right bg-", 
                                            badgeColor), badgeLabel)
    }
    else {
      badgeTag <- NULL
    }
    
    if (!is.null(tabName)) {
      shinydashboard:::validateTabName(tabName)
      isTabItem <- TRUE
      href <- paste0("#shiny-tab-", tabName)
    }
    else if (is.null(href)) {
      href <- "#"
    }
    else {
      if (newtab) 
        target <- "_blank"
    }
    tags$li(a(href = href, `data-toggle` = if (isTabItem) 
      "tab", `data-value` = if (!is.null(tabName)) 
        tabName, `data-start-selected` = if (isTRUE(selected)) 
          1
      else NULL, target = target, icon, span(text), badgeTag))
  }
  
  
  # ----------------------------------------------------------------------------------------------------
  # > CONSTANTES
  # ----------------------------------------------------------------------------------------------------
  
  mois <- read_csv('mois.csv')
  agences <- read_csv('Agences.csv')
  # bassins <- read_csv('bassins.csv')
  # departements <- read_csv('departements.csv')
  # naf88 <- read_csv('Naf_88.csv')
  naf <- read_csv('Naf.csv')
  etablissements <- read_csv('Etablissements.csv') # etablissements <- readRDS(file = "etablissements.rds")
  dictionnaire <- read_csv('Dictionnaire.csv')
  salaries <- c("0 salarié", "1 à 9 salariés", "10 à 19 salariés", "20 à 49 salariés", "50 salariés et plus")
  
  etabVar <- as.vector((dictionnaire %>% filter(Table == "etablissements"))$Label)
  
  
  # ----------------------------------------------------------------------------------------------------
  # > UI
  # ----------------------------------------------------------------------------------------------------
  
  # Header
  
  header <- dashboardHeader(titleWidth='300px', 
                            title = "Outil Entreprises",
                            tags$li(class = "dropdown", tags$a(HTML(paste(textOutput("mois"))))))
  
  # Sidebar
  
  sidebar <- dashboardSidebar(
              sidebarMenu(
                br(),
                br(),
                menuItem("Données employeur", icon = icon("building"), startExpanded = T,
                         menuSubItem2("Etablissements", tabName = "tabEtablissements"),
                         menuSubItem2("Offres", tabName = "tabOffres", badgeLabel = "Bientôt", badgeColor = ""),
                         menuSubItem2("DPAE", tabName = "tabDpae", badgeLabel = "Bientôt", badgeColor = "")),
                menuItem("Potentiels", icon = icon("bolt"), startExpanded = F,
                         menuSubItem2("Clents Potentiels", tabName = "tabPotentielClient", badgeLabel = "Bientôt", badgeColor = ""),
                         menuSubItem2("Potentiel BOE", tabName = "tabPotentielBoe")),
                menuItem("A propos", tabName = "tabaPropos", icon = icon("info-circle"))
              )
  )
  
  # Body       
  
  body <- dashboardBody(tags$head(tags$style(HTML('.modal-lg {width: 95%;} 
                                                  hr {border-top: 1px solid #D6DBDF ;}
                                                  /* logo */
        .skin-blue .main-header .logo {
                              background-color: #0077C1;
                              }

        /* logo when hovered */
        .skin-blue .main-header .logo:hover {
                              background-color: #0077C1;
                              }

        /* navbar (rest of the header) */
        .skin-blue .main-header .navbar {
                              background-color: #0077C1;
                              }        

        /* toggle button when hovered  */                    
         .skin-blue .main-header .navbar .sidebar-toggle:hover{
                              background-color: #023F88;
                              }
                                                  
 .box.box-solid.box-primary>.box-header {
  color:#fff;
  background:#00A5E4
                    }

.box.box-solid.box-primary{
border-bottom-color:#00A5E4;
border-left-color:#00A5E4;
border-right-color:#00A5E4;
border-top-color:#00A5E4;
}

.box.box-primary>.box-header {
  color:#000000;
  background:#fff
                    }

.box.box-primary{
border-bottom-color:#00A5E4;
border-left-color:#00A5E4;
border-right-color:#00A5E4;
border-top-color:#00A5E4;
}




 .box.box-solid.box-danger>.box-header {
  color:#fff;
  background:#D64B94
                    }

.box.box-solid.box-danger{
border-bottom-color:#D64B94;
border-left-color:#D64B94;
border-right-color:#D64B94;
border-top-color:#D64B94;
}

.box.box-danger>.box-header {
  color:#000000;
  background:#fff
                    }

.box.box-danger{
border-bottom-color:#D64B94;
border-left-color:#D64B94;
border-right-color:#D64B94;
border-top-color:#D64B94;
}






.content-wrapper, .right-side {
                                background-color: #eaf3fa;
                                }

.small-box.bg-yellow { background-color: #FAA61A !important; color: #ffffff !important; }
.small-box.bg-aqua { background-color: #00A5E4 !important; color: #ffffff !important; }
.small-box.bg-maroon { background-color: #D64B94 !important; color: #ffffff !important; }

                                        
                                                  '))),
                        shinyjs::useShinyjs(),
    fluidRow(column(3),
             column(5, selectizeInput("zone", label = NULL, choices = list(Agences = agences$Agences), width = '100%', options = list(placeholder = 'Rechercher une zone...', onInitialize = I('function() { this.setValue(""); }')))),
             column(3, br(), a(id = "toggleRecherche", "Recherche avancée...", href="#"))
     ),
    shinyjs::hidden(div(width = 12, id = "rechercheForm", 
      fluidRow(                  
        column(4,                 
         selectizeInput("secteur", "Secteur :", width = "100%", choices = list(`Tous secteurs` = c("Tous secteurs"), `Choix personnalisé` = c("Personnalisé"), Secteur = c("Agriculture", "Commerce", "Construction", "Commerce", "Industrie", "Service"))),
          conditionalPanel(condition = "input.secteur == 'Personnalisé'", selectizeInput("naf", "Choix personnalisé :", choices = naf, multiple = T, width = "100%", options = list(placeholder = 'Choisir une ou plusieurs NAF...', onInitialize = I('function() { this.setValue(""); }'))))), 
        column(4,
          checkboxGroupInput("client", label = "Clients (offres dans les 12 mois) :", choices = list("Clients" = "Oui", "Non clients" = "Non"), selected = c("Oui", "Non")),
          checkboxGroupInput("adaptee", label = "Entreprise adaptée :", choices = list("Adaptée" = "Oui", "Non adaptée" = "Non"), selected = c("Oui", "Non"))),
        column(4,
               checkboxGroupInput("effectif", label = "Effectif :", choices = salaries, selected = salaries))))),
    hr(),
    tabItems(
      tabItem(tabName = "tabEtablissements", conditionalPanel(condition = ("(input.zone != '') & (input.secteur != 'Personnalisé' | input.naf != '')"),
              fluidRow(
                column(width = 3, valueBoxOutput("nbEtabBox", width = 12)), 
                column(width = 3, valueBoxOutput("nbClientsBox", width = 12)),
                column(width = 3, valueBoxOutput("nbPotClientsBox", width = 12)),
                column(width = 3, valueBoxOutput("nbPotBoeBox", width = 12))),
              fluidRow(
                column(width = 7,
                 box(width = 12, solidHeader = T, witdh = 12, actionButton("list", "Voir la liste", icon = icon("table")), ">> Explorez, téléchargez la liste des établissements et travaillez-là sur Excel"),
                 bsModal("modalExample", "Liste entière", "list", size = "large", {DT::dataTableOutput("etabDataTable")}),
                 box(title = "10 premières communes", width = 12, status = "primary", solidHeader = T, DT::dataTableOutput("topCom"))),
                column(width = 5, 
                  box(title = "Typlogie d'établissement", width = 12, status = "primary", solidHeader = T,
                      fluidRow(style='border-bottom: 1px solid #E8E8E8', column(width = 12, h4('Privé / Public'), plotlyOutput('plotPriv', height = "200px"))),
                      fluidRow(column(width = 12, h4('Forme juridique'), plotlyOutput('plotTitre', height = "200px")))))
                       ),
              fluidRow(box(title = "Répartition par effectif",  width = 6, status = "primary", solidHeader = T,
                           plotlyOutput('plotEffectif')),
                box(title = "Répartition par secteur", width = 6, status = "primary", solidHeader = T, 
                    plotlyOutput('plotSecteur'))),
              fluidRow(box(title = "Les 15 plus gros établissements", width = 12, status = "primary", solidHeader = T,
                    DT::dataTableOutput("topEtab"))),
              fluidRow(box(title = "Les 15 NAF les plus importantes", width = 12, status = "primary", solidHeader = T,
                           DT::dataTableOutput("topNaf")))

                                                          )),
      tabItem(tabName = "tabOffres", 
        fluidRow(
          valueBoxOutput("nbOffresBox", width = 3),
          box(width = 9, solidHeader = T, 
              HTML("Page en construction...")))),
      tabItem(tabName = "tabDpae", 
              fluidRow(
                valueBoxOutput("nbDpaeBox", width = 3),
                box(width = 9, solidHeader = T, 
                    HTML("Page en construction...")))),
      tabItem(tabName = "tabPotentielClient", fluidRow(box(width = 12, p("Page en construction")))),
      tabItem(tabName = "tabPotentielBoe", conditionalPanel(condition = ("(input.zone != '') & (input.secteur != 'Personnalisé' | input.naf != '')"),
                                                            
       fluidRow(
         column(width = 3, valueBoxOutput("nbPotBoeBox2", width = 12)), 
         column(width = 3, valueBoxOutput("nbPotBoeBoxCli", width = 12)),
         column(width = 3, valueBoxOutput("nbPotBoeBoxCliPot", width = 12)),
         column(width = 3, valueBoxOutput("nbPotBoeBoxNonCliPot", width = 12))),  
       
       fluidRow(box(title = "Etablissements à potentiel de recrutement BOE", width = 12, status = "danger", solidHeader = T,
                    fluidRow(style='border-bottom: 1px solid #E8E8E8',
                      HTML("<img style='height: 70px; float: left; margin: 10px 10px' src='accessible-icon.svg'>
                            <p>Liste exhaustive des établissements à potentiel d'embauche de salarié en obligation d'emploi.<BR>
                               Ce potentiel est établi à l'aide d'un calcul statistique prenant en compte les caractéristiques de l'établissement, et notamment ses recrutements sur les trois dernières années.<BR>
                               Il doit permettre de cibler les établissements les plus succeptibles d'employer de la main d'oeuvre en obligation d'emploi.<BR>
                               En complément : <a href='Recrutements de DE BOE.pdf' target='_blank'>une note</a> réalisée en marge du groupe de travail à l'origine de la création de cette rubrique.</p>")),
                    fluidRow(column(width = 12, br(), DT::dataTableOutput("dataPotBoe"))))),
       fluidRow(box(title = "Etablissements à potentiel de recrutement BOE, clients", width = 12, status = "primary", solidHeader = T,
                    fluidRow(style='border-bottom: 1px solid #E8E8E8',
                             HTML("<img style='height: 70px; float: left; margin: 10px 10px' src='users.svg'>
                            <p>Parmi les établissements à potentiel de recrutement de salariés en obligation demploi identifiés plus haut, cette liste contient uniquement les établissements déjà clients.<BR><BR>
                               Un établissement est considéré comme client s'il est à l'origine d'un dépôt d'offre à Pôle emploi sur les 12 derniers mois</p>")),
                    fluidRow(column(width = 12, br(), DT::dataTableOutput("dataPotBoeCli"))))),
       fluidRow(box(title = "Etablissements à potentiel de recrutement BOE, clients potentiels", width = 12, status = "primary", solidHeader = T,
                    fluidRow(style='border-bottom: 1px solid #E8E8E8',
                             HTML("<img style='height: 70px; float: left; margin: 10px 10px' src='users-cog.svg'>
                            <p>Parmi les établissements à potentiel de recrutement de salariés en obligation demploi identifiés plus haut, cette liste contient les établissements non clients, mais identifiés comme pouvant potentiellement l'être.<BR><BR>
                               Le potentiel client est issu d'un calcul statistique prenant en compte les caractéristiques de l'entreprise  : NAF, forme juridique, effectif salarié, embauches passées...</p>")),
                    fluidRow(column(width = 12, br(), DT::dataTableOutput("dataPotBoeCliPot"))))), 
       
       
                                                            
      )),
      tabItem(tabName = "tabaPropos", fluidRow(box(width = 12, status = "primary", HTML("Cette application est une version en construction du futur outil destiné à remplacer l'outil d'aide à la prospection pour les CDE, qui n'est plus disponible.
                                <BR><BR>
                                Bien qu'en cours de développement, elle est mise à disposition des agences par le service SEE comme aide à la revue des portefeuilles entreprises dans le cadre du rapprochement avec CAP Emploi.
                                En effet, la partie sur les potentiels de recrutement permet d'ores et déjà de cibler les établissements à potentiel d'embauche de demandeurs BOE.
                                Beaucoup de rubriques sont toutefois encore vides, et quelques bugs peuvent exister.
                                <BR><BR>
                                Nous sommes preneurs  de toutes suggestions concernant le futur outil : <A href='mailto:statspdl@pole-emploi.fr'>statspdl@pole-emploi.fr</A>"))))
                                                            
      )
    )
  
  # Ui
  
  ui <- dashboardPage(header, sidebar, body)
  
  
  # ----------------------------------------------------------------------------------------------------
  # > SERVER
  # ----------------------------------------------------------------------------------------------------
  
  server <- function(input, output) {
    
    # JS
    shinyjs::onclick("toggleRecherche", toggle(id = "rechercheForm", anim = TRUE))    
    
    # Popup accueil
    showModal(modalDialog(title = "Message important",
                          HTML("Cette application est une version en construction du futur outil destiné à remplacer l'outil d'aide à la prospection pour les CDE, qui n'est plus disponible.
                                <BR><BR>
                                Bien qu'en cours de développement, elle est mise à disposition des agences par le service SEE comme aide à la revue des portefeuilles entreprises dans le cadre du rapprochement avec CAP Emploi.
                                <BR><BR> 
                                En effet, la partie sur les potentiels de recrutement permet d'ores et déjà de cibler les établissements à potentiel d'embauche de demandeurs BOE.
                                <BR><BR>
                                Beaucoup de rubriques sont toutefois encore vides, et quelques bugs peuvent exister."),
                          easyClose = F,
                          footer = modalButton("OK !")))
    
    
    # Libelle du mois
    output$mois <- renderText({
      paste("Données à fin ", as.character(mois %>% select(Mois)))
    })
    
    # Table etabAgence
    etabAgence <- reactive({if (input$secteur == "Tous secteurs") {
                              etablissements %>% 
                                filter(Agence == input$zone & Client %in% input$client & Effectif_reg %in% input$effectif & Entreprise_adaptee %in% input$adaptee)
                           } else if (input$secteur == "Personnalisé") {
                              etablissements %>% 
                                filter(Agence == input$zone & Client %in% input$client & Effectif_reg %in% input$effectif & Naf %in% input$naf & Entreprise_adaptee %in% input$adaptee)
                           } else {
                             etablissements %>% 
                               filter(Agence == input$zone & Client %in% input$client & Effectif_reg %in% input$effectif & Secteur == input$secteur & Entreprise_adaptee %in% input$adaptee)
                           }})

    # Nb etab
    output$nbEtabBox <- renderInfoBox({valueBox(subtitle = "Etablissements actifs implantés sur la zone",
                                                value = prettyNum(nrow(etabAgence()), big.mark = " "),
                                                icon = icon("building"),
                                                color = "yellow")})
    
    # Nb clients
    output$nbClientsBox <- renderInfoBox({valueBox(subtitle = "Clients (offre dans les 12 derniers mois)",
                                                   value = prettyNum(nrow(etabAgence() %>% filter(Client == "Oui")), big.mark = " "),
                                                   icon = icon("users"),
                                                   color = "aqua")})
    
    # Nb clients potentiels
    output$nbPotClientsBox <- renderInfoBox({valueBox(subtitle = "Clients potentiels",
                                                   value = prettyNum(nrow(etabAgence() %>% filter(Client == "Non" & Potentiel_client == "Oui")), big.mark = " "),
                                                   icon = icon("users-cog"),
                                                   color = "aqua")})
    
    # Nb BOE potentiels
    output$nbPotBoeBox <- renderInfoBox({valueBox(subtitle = "Etablissements à potentiel de recrutement BOE",
                                                   value = prettyNum(nrow(etabAgence() %>% filter(Potentiel_boe != "z - Pas de potentiel")), big.mark = " "),
                                                   icon = icon("accessible-icon"),
                                                   color = "aqua")})
    
    # Nb offres
    output$nbOffresBox <- renderInfoBox({valueBox(subtitle = "Offres sur 12 mois",
                                          value = prettyNum(sum(etabAgence()$Offres), big.mark = " "),
                                          icon = icon("laptop"),
                                          color = "green")})
    
    # Nb Dpae
    output$nbDpaeBox <- renderInfoBox({valueBox(subtitle = "DPAE sur 12 mois",
                                                  value = prettyNum(sum(etabAgence()$Dpae), big.mark = " "),
                                                  icon = icon("handshake"),
                                                  color = "purple")})
    
    
    # Nb BOE potentiels 2
    output$nbPotBoeBox2 <- renderInfoBox({valueBox(subtitle = "Etablissements à potentiel de recrutement BOE",
                                                  value = prettyNum(nrow(etabAgence() %>% filter(Potentiel_boe != "z - Pas de potentiel")), big.mark = " "),
                                                  icon = icon("accessible-icon"),
                                                  color = "maroon")})
    
    # Nb BOE potentiels clients
    output$nbPotBoeBoxCli <- renderInfoBox({valueBox(subtitle = "Dont établissements clients",
                                                      value = prettyNum(nrow(etabAgence() %>% filter(Potentiel_boe != "z - Pas de potentiel" & Client == "Oui")), big.mark = " "),
                                                      icon = icon("users"),
                                                      color = "aqua")})
    
    # Nb BOE potentiels clients potentiels
    output$nbPotBoeBoxCliPot <- renderInfoBox({valueBox(subtitle = "Dont établissements clients potentiels",
                                                      value = prettyNum(nrow(etabAgence() %>% filter(Potentiel_boe != "z - Pas de potentiel" & Client == "Non" & Potentiel_client == "Oui")), big.mark = " "),
                                                      icon = icon("users-cog"),
                                                      color = "aqua")})
    
    # Nb BOE potentiels non clients po
    output$nbPotBoeBoxNonCliPot <- renderInfoBox({valueBox(subtitle = "Ni clients, ni clients potentiels",
                                                        value = prettyNum(nrow(etabAgence() %>% filter(Potentiel_boe != "z - Pas de potentiel" & Client == "Non" & Potentiel_client == "Non")), big.mark = " "),
                                                        icon = icon("users-slash"),
                                                        color = "aqua")})
    
    # DataTable des établissements
    output$etabDataTable <- DT::renderDataTable(etabAgence(),
                                                colnames = etabVar,
                                                extensions = "Buttons",
                                                class = 'nowrap display',
                                                rownames= F,
                                                options = list(dom = 'Bftipr',
                                                               language = list(url = "fr.json"),
                                                               buttons = list(list(extend = "collection", text = "Télécharger la liste entière", action = DT::JS("function ( e, dt, node, config ) {Shiny.setInputValue('telDiv', true, {priority: 'event'});}"))),
                                                               pageLength=10, 
                                                               scrollX='400px')
                                                )
    
    # DataTable BOE potentiel
    output$dataPotBoe <- DT::renderDataTable(etabAgence() %>% filter(Potentiel_boe != "z - Pas de potentiel") %>% arrange(desc(Potentiel_boe), desc(Dpae_de_boe)),
                                                colnames = etabVar,
                                                extensions = "Buttons",
                                                class = 'nowrap display',
                                                rownames= F,
                                                options = list(dom = 'Bftipr',
                                                               language = list(url = "fr.json"),
                                                               buttons = list(list(extend = "collection", text = "Télécharger la liste entière", action = DT::JS("function ( e, dt, node, config ) {Shiny.setInputValue('telDiv2', true, {priority: 'event'});}"))),
                                                               pageLength=10, 
                                                               scrollX='400px')
    )
    
    
    # DataTable BOE potentiel 2
    output$dataPotBoeCli <- DT::renderDataTable(etabAgence() %>% filter(Potentiel_boe != "z - Pas de potentiel" & Client == "Oui") %>% arrange(desc(Potentiel_boe), desc(Dpae_de_boe)),
                                             colnames = etabVar,
                                             extensions = "Buttons",
                                             class = 'nowrap display',
                                             rownames= F,
                                             options = list(dom = 'Bftipr',
                                                            language = list(url = "fr.json"),
                                                            buttons = list(list(extend = "collection", text = "Télécharger la liste entière", action = DT::JS("function ( e, dt, node, config ) {Shiny.setInputValue('telDiv3', true, {priority: 'event'});}"))),
                                                            pageLength=10, 
                                                            scrollX='400px')
    )
    
    # DataTable BOE potentiel 3
    output$dataPotBoeCliPot <- DT::renderDataTable(etabAgence() %>% filter(Potentiel_boe != "z - Pas de potentiel" & Client == "Non" & Potentiel_client == "Oui") %>% arrange(desc(Potentiel_boe), desc(Dpae_de_boe)),
                                                colnames = etabVar,
                                                extensions = "Buttons",
                                                class = 'nowrap display',
                                                rownames= F,
                                                options = list(dom = 'Bftipr',
                                                               language = list(url = "fr.json"),
                                                               buttons = list(list(extend = "collection", text = "Télécharger la liste entière", action = DT::JS("function ( e, dt, node, config ) {Shiny.setInputValue('telDiv4', true, {priority: 'event'});}"))),
                                                               pageLength=10, 
                                                               scrollX='400px')
    )
    
    
    # Modal
    observeEvent(input$telDiv, {showModal(telModal())})
    observeEvent(input$telDiv2, {showModal(telModal2())})
    observeEvent(input$telDiv3, {showModal(telModal3())})
    observeEvent(input$telDiv4, {showModal(telModal4())})
    
    
    output$download1 <- downloadHandler(
      filename = "Liste.csv",
      content = function(file) {write.csv2(etabAgence(), 
                                           file, na = "", 
                                           row.names = F,
                                           col.names = etabVar,
                                           fileEncoding = "UTF-16LE")})
    output$download2 <- downloadHandler(
      filename = "Liste.csv",
      content = function(file) {write.csv2(etabAgence() %>% filter(Potentiel_boe != "z - Pas de potentiel") %>% arrange(desc(Potentiel_boe), desc(Dpae_de_boe)), 
                                           file, na = "", 
                                           row.names = F,
                                           col.names = etabVar,
                                           fileEncoding = "UTF-16LE")})
    output$download3 <- downloadHandler(
      filename = "Liste.csv",
      content = function(file) {write.csv2(etabAgence() %>%filter(Potentiel_boe != "z - Pas de potentiel" & Client == "Oui") %>% arrange(desc(Potentiel_boe), desc(Dpae_de_boe)), 
                                           file, na = "", 
                                           row.names = F,
                                           col.names = etabVar,
                                           fileEncoding = "UTF-16LE")})
    output$download4 <- downloadHandler(
      filename = "Liste.csv",
      content = function(file) {write.csv2(etabAgence() %>%filter(Potentiel_boe != "z - Pas de potentiel" & Client == "Non" & Potentiel_client == "Oui") %>% arrange(desc(Potentiel_boe), desc(Dpae_de_boe)), 
                                           file, na = "", 
                                           row.names = F,
                                           col.names = etabVar,
                                           fileEncoding = "UTF-16LE")})
    
    
    
    
    output$topCom <- DT::renderDataTable(etabAgence()  %>% 
                                         select(Commune) %>%
                                         count(Commune) %>%
                                         mutate(f = n / sum(n)) %>%
                                         slice_max(n, n = 10, with_ties = F) %>%
                                         rename(`Etablissements` = n, `Part` = f) %>%
                                         datatable(options = list(searching = FALSE,
                                                                  lengthChange = FALSE, 
                                                                  paging = FALSE, 
                                                                  info = FALSE, 
                                                                  columns = list(orderable = FALSE),
                                                                  columnDefs = list(list(className = 'dt-center', targets = c(2, 3))))) %>%
                                         formatPercentage(3, digits = 1, dec.mark = ","))
                                            
                
    output$topEtab <- DT::renderDataTable(etabAgence()  %>% 
                                          slice_head(n = 15) %>%
                                          unite(col = Etablissement, Raison, Enseigne, na.rm = T, sep = " - ") %>%
                                          select(Rce, Etablissement, Naf, Effectif, Dpae, Offres) %>%
                                          rename(`DPAE 12 mois` = Dpae, `Offres 12 mois` = Offres) %>%
                                          datatable(options = list(searching = FALSE,
                                                                   lengthChange = FALSE, 
                                                                   paging = FALSE, 
                                                                   info = FALSE, 
                                                                   columns = list(orderable = FALSE),
                                                                   columnDefs = list(list(className = 'dt-center', targets = c(1, 4, 5, 6))))))
    
    
    output$topNaf <- DT::renderDataTable(etabAgence() %>% 
                                           group_by(Naf) %>%
                                           summarise(Volume = n(), `DPAE 12 mois` = sum(Dpae), `Offres 12 mois` = sum(Offres)) %>%
                                           arrange(desc(Volume)) %>%
                                           slice_head(n = 15) %>%
                                           datatable(options = list(searching = FALSE,
                                                                    lengthChange = FALSE, 
                                                                    paging = FALSE, 
                                                                    info = FALSE, 
                                                                    columns = list(orderable = FALSE),
                                                                    columnDefs = list(list(className = 'dt-center', targets = c(2, 3, 4))))))
    
    
    
    
    
    
    
    etablissements %>% 
      group_by(Naf) %>%
      summarise(volume = n(), `DPAE 12 mois` = sum(Dpae), `Offres 12 mois` = sum(Offres))
    
  
    output$plotEffectif <- renderPlotly(plot_ly(etabAgence() %>% 
                                                  # select(Effectif_reg) %>% 
                                                  count(Effectif_reg) %>%
                                                  mutate(f = n / sum(n)),
                                                x = ~Effectif_reg,
                                                y = ~f,
                                                type = "bar",
                                                hoverinfo = 'y',
                                                marker = list(color = "#FAA61A")) %>%
                                            layout(xaxis = list(title = "", fixedrange = T),
                                                   yaxis = list(title = "", tickformat = ".1%", fixedrange = T),
                                                   separators = ",") %>%
                                            config(displayModeBar = F))
    
    
    output$plotSecteur <- renderPlotly(plot_ly(etabAgence() %>% 
                                                # select(Secteur) %>% 
                                                count(Secteur) %>%
                                                mutate(f = n / sum(n)),
                                               x = ~Secteur,
                                               y = ~f,
                                               type = "bar",
                                               hoverinfo = 'y',
                                               marker = list(color = "#FAA61A")) %>%
                                          layout(xaxis = list(title = "", fixedrange = T),
                                                 yaxis = list(title = "", tickformat = ".1%", fixedrange = T),
                                                 separators = ",") %>%
                                          config(displayModeBar = F))
    
    output$plotTitre <- renderPlotly(plot_ly(etabAgence() %>% 
                                                 count(Titre_reg) %>%
                                                 mutate(f = n / sum(n)),
                                               x = ~Titre_reg,
                                               y = ~f,
                                               type = "bar",
                                               hoverinfo = 'y',
                                               marker = list(color = "#FAA61A")) %>%
                                         layout(xaxis = list(title = "", fixedrange = T),
                                                yaxis = list(title = "", tickformat = ".1%", fixedrange = T),
                                                separators = ",") %>%
                                         config(displayModeBar = F))
    
    
    
    output$plotPriv <- renderPlotly(plot_ly(etabAgence() %>% 
                                               count(Statut) %>%
                                               mutate(f = n / sum(n)),
                                             labels = ~Statut,
                                             values = ~f,
                                             type = "pie",
                                             textposition = 'inside',
                                             textinfo = 'label+percent',
                                             insidetextfont = list(color = '#FFFFFF'),
                                             hoverinfo = 'text',
                                             text = ~f,
                                             marker = list(colors = c("#FAA61A", "#FDC88F"), line = list(color = '#FFFFFF', width = 1)),
                                             showlegend = F
                                            ) %>%
                                       layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                                              yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                                              separators = ",") %>%
                                       config(displayModeBar = F)
    )
    
    
    
  
  }
  
  
  # ----------------------------------------------------------------------------------------------------
  # > APP
  # ----------------------------------------------------------------------------------------------------
  
  shinyApp(ui, server)
  

  
  
  
  
  
